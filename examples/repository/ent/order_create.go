// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"examples/repository/ent/item"
	"examples/repository/ent/order"
	"examples/repository/ent/shop"
	"examples/repository/ent/user"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (oc *OrderCreate) SetCreateTime(t time.Time) *OrderCreate {
	oc.mutation.SetCreateTime(t)
	return oc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreateTime(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCreateTime(*t)
	}
	return oc
}

// SetUpdateTime sets the "update_time" field.
func (oc *OrderCreate) SetUpdateTime(t time.Time) *OrderCreate {
	oc.mutation.SetUpdateTime(t)
	return oc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdateTime(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetUpdateTime(*t)
	}
	return oc
}

// SetUserID sets the "user_id" field.
func (oc *OrderCreate) SetUserID(i int) *OrderCreate {
	oc.mutation.SetUserID(i)
	return oc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUserID(i *int) *OrderCreate {
	if i != nil {
		oc.SetUserID(*i)
	}
	return oc
}

// SetShopID sets the "shop_id" field.
func (oc *OrderCreate) SetShopID(i int) *OrderCreate {
	oc.mutation.SetShopID(i)
	return oc
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableShopID(i *int) *OrderCreate {
	if i != nil {
		oc.SetShopID(*i)
	}
	return oc
}

// SetStatus sets the "status" field.
func (oc *OrderCreate) SetStatus(i int) *OrderCreate {
	oc.mutation.SetStatus(i)
	return oc
}

// SetConsignee sets the "consignee" field.
func (oc *OrderCreate) SetConsignee(s string) *OrderCreate {
	oc.mutation.SetConsignee(s)
	return oc
}

// SetMobile sets the "mobile" field.
func (oc *OrderCreate) SetMobile(s string) *OrderCreate {
	oc.mutation.SetMobile(s)
	return oc
}

// SetProvince sets the "province" field.
func (oc *OrderCreate) SetProvince(s string) *OrderCreate {
	oc.mutation.SetProvince(s)
	return oc
}

// SetCity sets the "city" field.
func (oc *OrderCreate) SetCity(s string) *OrderCreate {
	oc.mutation.SetCity(s)
	return oc
}

// SetUser sets the "user" edge to the User entity.
func (oc *OrderCreate) SetUser(u *User) *OrderCreate {
	return oc.SetUserID(u.ID)
}

// SetShop sets the "shop" edge to the Shop entity.
func (oc *OrderCreate) SetShop(s *Shop) *OrderCreate {
	return oc.SetShopID(s.ID)
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (oc *OrderCreate) AddItemIDs(ids ...int) *OrderCreate {
	oc.mutation.AddItemIDs(ids...)
	return oc
}

// AddItems adds the "items" edges to the Item entity.
func (oc *OrderCreate) AddItems(i ...*Item) *OrderCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return oc.AddItemIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	var (
		err  error
		node *Order
	)
	oc.defaults()
	if len(oc.hooks) == 0 {
		if err = oc.check(); err != nil {
			return nil, err
		}
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oc.check(); err != nil {
				return nil, err
			}
			oc.mutation = mutation
			if node, err = oc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			if oc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() {
	if _, ok := oc.mutation.CreateTime(); !ok {
		v := order.DefaultCreateTime()
		oc.mutation.SetCreateTime(v)
	}
	if _, ok := oc.mutation.UpdateTime(); !ok {
		v := order.DefaultUpdateTime()
		oc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Order.create_time"`)}
	}
	if _, ok := oc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Order.update_time"`)}
	}
	if _, ok := oc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Order.status"`)}
	}
	if _, ok := oc.mutation.Consignee(); !ok {
		return &ValidationError{Name: "consignee", err: errors.New(`ent: missing required field "Order.consignee"`)}
	}
	if _, ok := oc.mutation.Mobile(); !ok {
		return &ValidationError{Name: "mobile", err: errors.New(`ent: missing required field "Order.mobile"`)}
	}
	if _, ok := oc.mutation.Province(); !ok {
		return &ValidationError{Name: "province", err: errors.New(`ent: missing required field "Order.province"`)}
	}
	if _, ok := oc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Order.city"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: order.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		}
	)
	_spec.OnConflict = oc.conflict
	if value, ok := oc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := oc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := oc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: order.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := oc.mutation.Consignee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldConsignee,
		})
		_node.Consignee = value
	}
	if value, ok := oc.mutation.Mobile(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldMobile,
		})
		_node.Mobile = value
	}
	if value, ok := oc.mutation.Province(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldProvince,
		})
		_node.Province = value
	}
	if value, ok := oc.mutation.City(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldCity,
		})
		_node.City = value
	}
	if nodes := oc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserTable,
			Columns: []string{order.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ShopTable,
			Columns: []string{order.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShopID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (oc *OrderCreate) OnConflict(opts ...sql.ConflictOption) *OrderUpsertOne {
	oc.conflict = opts
	return &OrderUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (oc *OrderCreate) OnConflictColumns(columns ...string) *OrderUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertOne{
		create: oc,
	}
}

type (
	// OrderUpsertOne is the builder for "upsert"-ing
	//  one Order node.
	OrderUpsertOne struct {
		create *OrderCreate
	}

	// OrderUpsert is the "OnConflict" setter.
	OrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *OrderUpsert) SetCreateTime(v time.Time) *OrderUpsert {
	u.Set(order.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCreateTime() *OrderUpsert {
	u.SetExcluded(order.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *OrderUpsert) SetUpdateTime(v time.Time) *OrderUpsert {
	u.Set(order.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OrderUpsert) UpdateUpdateTime() *OrderUpsert {
	u.SetExcluded(order.FieldUpdateTime)
	return u
}

// SetUserID sets the "user_id" field.
func (u *OrderUpsert) SetUserID(v int) *OrderUpsert {
	u.Set(order.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateUserID() *OrderUpsert {
	u.SetExcluded(order.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrderUpsert) ClearUserID() *OrderUpsert {
	u.SetNull(order.FieldUserID)
	return u
}

// SetShopID sets the "shop_id" field.
func (u *OrderUpsert) SetShopID(v int) *OrderUpsert {
	u.Set(order.FieldShopID, v)
	return u
}

// UpdateShopID sets the "shop_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateShopID() *OrderUpsert {
	u.SetExcluded(order.FieldShopID)
	return u
}

// ClearShopID clears the value of the "shop_id" field.
func (u *OrderUpsert) ClearShopID() *OrderUpsert {
	u.SetNull(order.FieldShopID)
	return u
}

// SetStatus sets the "status" field.
func (u *OrderUpsert) SetStatus(v int) *OrderUpsert {
	u.Set(order.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsert) UpdateStatus() *OrderUpsert {
	u.SetExcluded(order.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *OrderUpsert) AddStatus(v int) *OrderUpsert {
	u.Add(order.FieldStatus, v)
	return u
}

// SetConsignee sets the "consignee" field.
func (u *OrderUpsert) SetConsignee(v string) *OrderUpsert {
	u.Set(order.FieldConsignee, v)
	return u
}

// UpdateConsignee sets the "consignee" field to the value that was provided on create.
func (u *OrderUpsert) UpdateConsignee() *OrderUpsert {
	u.SetExcluded(order.FieldConsignee)
	return u
}

// SetMobile sets the "mobile" field.
func (u *OrderUpsert) SetMobile(v string) *OrderUpsert {
	u.Set(order.FieldMobile, v)
	return u
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *OrderUpsert) UpdateMobile() *OrderUpsert {
	u.SetExcluded(order.FieldMobile)
	return u
}

// SetProvince sets the "province" field.
func (u *OrderUpsert) SetProvince(v string) *OrderUpsert {
	u.Set(order.FieldProvince, v)
	return u
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *OrderUpsert) UpdateProvince() *OrderUpsert {
	u.SetExcluded(order.FieldProvince)
	return u
}

// SetCity sets the "city" field.
func (u *OrderUpsert) SetCity(v string) *OrderUpsert {
	u.Set(order.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCity() *OrderUpsert {
	u.SetExcluded(order.FieldCity)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *OrderUpsertOne) UpdateNewValues() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(order.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Order.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *OrderUpsertOne) Ignore() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertOne) DoNothing() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreate.OnConflict
// documentation for more info.
func (u *OrderUpsertOne) Update(set func(*OrderUpsert)) *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *OrderUpsertOne) SetCreateTime(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCreateTime() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *OrderUpsertOne) SetUpdateTime(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateUpdateTime() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrderUpsertOne) SetUserID(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateUserID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrderUpsertOne) ClearUserID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearUserID()
	})
}

// SetShopID sets the "shop_id" field.
func (u *OrderUpsertOne) SetShopID(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetShopID(v)
	})
}

// UpdateShopID sets the "shop_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateShopID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateShopID()
	})
}

// ClearShopID clears the value of the "shop_id" field.
func (u *OrderUpsertOne) ClearShopID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearShopID()
	})
}

// SetStatus sets the "status" field.
func (u *OrderUpsertOne) SetStatus(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *OrderUpsertOne) AddStatus(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateStatus() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStatus()
	})
}

// SetConsignee sets the "consignee" field.
func (u *OrderUpsertOne) SetConsignee(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetConsignee(v)
	})
}

// UpdateConsignee sets the "consignee" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateConsignee() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateConsignee()
	})
}

// SetMobile sets the "mobile" field.
func (u *OrderUpsertOne) SetMobile(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetMobile(v)
	})
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateMobile() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateMobile()
	})
}

// SetProvince sets the "province" field.
func (u *OrderUpsertOne) SetProvince(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetProvince(v)
	})
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateProvince() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateProvince()
	})
}

// SetCity sets the "city" field.
func (u *OrderUpsertOne) SetCity(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCity() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCity()
	})
}

// Exec executes the query.
func (u *OrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	builders []*OrderCreate
	conflict []sql.ConflictOption
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (ocb *OrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderUpsertBulk {
	ocb.conflict = opts
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ocb *OrderCreateBulk) OnConflictColumns(columns ...string) *OrderUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OrderUpsertBulk is the builder for "upsert"-ing
// a bulk of Order nodes.
type OrderUpsertBulk struct {
	create *OrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *OrderUpsertBulk) UpdateNewValues() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(order.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *OrderUpsertBulk) Ignore() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertBulk) DoNothing() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreateBulk.OnConflict
// documentation for more info.
func (u *OrderUpsertBulk) Update(set func(*OrderUpsert)) *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *OrderUpsertBulk) SetCreateTime(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCreateTime() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *OrderUpsertBulk) SetUpdateTime(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateUpdateTime() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrderUpsertBulk) SetUserID(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateUserID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrderUpsertBulk) ClearUserID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearUserID()
	})
}

// SetShopID sets the "shop_id" field.
func (u *OrderUpsertBulk) SetShopID(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetShopID(v)
	})
}

// UpdateShopID sets the "shop_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateShopID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateShopID()
	})
}

// ClearShopID clears the value of the "shop_id" field.
func (u *OrderUpsertBulk) ClearShopID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearShopID()
	})
}

// SetStatus sets the "status" field.
func (u *OrderUpsertBulk) SetStatus(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *OrderUpsertBulk) AddStatus(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateStatus() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStatus()
	})
}

// SetConsignee sets the "consignee" field.
func (u *OrderUpsertBulk) SetConsignee(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetConsignee(v)
	})
}

// UpdateConsignee sets the "consignee" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateConsignee() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateConsignee()
	})
}

// SetMobile sets the "mobile" field.
func (u *OrderUpsertBulk) SetMobile(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetMobile(v)
	})
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateMobile() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateMobile()
	})
}

// SetProvince sets the "province" field.
func (u *OrderUpsertBulk) SetProvince(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetProvince(v)
	})
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateProvince() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateProvince()
	})
}

// SetCity sets the "city" field.
func (u *OrderUpsertBulk) SetCity(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCity() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCity()
	})
}

// Exec executes the query.
func (u *OrderUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
